---
description: Naming conventions for the PowerPoint Automizer codebase to ensure consistency and maintainability
globs: ["**/*.{ts,tsx,js,jsx}"]
alwaysApply: true
related_docs: ["backend/src/NAMING-CONVENTIONS.md"]
---

# PowerPoint Automizer Naming Conventions

@context {
    "type": "guidelines",
    "purpose": "code_standards",
    "format_version": "1.0.0",
    "supported_content_types": [
        "typescript",
        "javascript",
        "react"
    ]
}

@structure {
    "sections": [
        "file_naming",
        "class_naming",
        "variable_naming",
        "function_naming",
        "import_statements"
    ]
}

## File Naming Conventions

@rules [
    {
        "id": "file_kebab_case",
        "severity": "error",
        "description": "Use kebab-case for all file names",
        "examples": ["powerpoint-analysis-service.ts", "data-transformation-service.ts"],
        "exceptions": ["React components in the frontend may use PascalCase (e.g., Button.tsx)"]
    },
    {
        "id": "test_file_naming",
        "severity": "error",
        "description": "Append .test or .spec to test file names",
        "examples": ["powerpoint-analysis-service.test.ts"]
    },
    {
        "id": "interface_file_naming",
        "severity": "error",
        "description": "Use the same naming convention as regular files for interface files",
        "examples": ["powerpoint-service-interface.ts"]
    }
]

## Class Naming Conventions

@rules [
    {
        "id": "service_class_naming",
        "severity": "error",
        "description": "Use PascalCase and append Service to service class names",
        "examples": ["PowerpointAnalysisService", "DataTransformationService"]
    },
    {
        "id": "repository_class_naming",
        "severity": "error",
        "description": "Use PascalCase and append Repository to repository class names",
        "examples": ["PowerpointTemplateRepository", "DataSourceRepository"]
    },
    {
        "id": "entity_class_naming",
        "severity": "error",
        "description": "Use PascalCase for entity class names",
        "examples": ["PresentationTemplate", "SlideTemplate"]
    },
    {
        "id": "interface_naming",
        "severity": "error",
        "description": "Use PascalCase with I prefix for interface names",
        "examples": ["IAnalysisService", "IPowerpointService"]
    }
]

## Variable Naming Conventions

@rules [
    {
        "id": "class_instance_naming",
        "severity": "error",
        "description": "Use camelCase for class instances",
        "examples": ["powerPointAnalysisService", "dataTransformationService"]
    },
    {
        "id": "constant_naming",
        "severity": "error",
        "description": "Use UPPER_SNAKE_CASE for true constants",
        "examples": ["MAX_FILE_SIZE", "DEFAULT_TIMEOUT"]
    },
    {
        "id": "private_member_naming",
        "severity": "error",
        "description": "Use camelCase with underscore prefix for private class members",
        "examples": ["_templateCache", "_analysisResults"]
    },
    {
        "id": "boolean_variable_naming",
        "severity": "error",
        "description": "Use is, has, or should prefix for boolean variables",
        "examples": ["isAnalyzing", "hasChart", "shouldRefresh"]
    }
]

## Function Naming Conventions

@rules [
    {
        "id": "method_naming",
        "severity": "error",
        "description": "Use camelCase and verb-first naming for methods",
        "examples": ["analyzeTemplate()", "extractSlides()"]
    },
    {
        "id": "event_handler_naming",
        "severity": "error",
        "description": "Use handle or on prefix for event handlers",
        "examples": ["handleSubmit()", "onFileUpload()"]
    },
    {
        "id": "async_method_naming",
        "severity": "error",
        "description": "No special prefix for async methods, but should return a Promise",
        "examples": ["async analyzeTemplate()", "async extractData()"]
    }
]

## Import Statement Conventions

@rules [
    {
        "id": "import_grouping",
        "severity": "warning",
        "description": "Group imports in the following order, separated by a blank line: 1) Node.js built-in modules, 2) External dependencies, 3) Internal modules (absolute paths), 4) Internal modules (relative paths)",
        "example": "import fs from 'fs';\nimport path from 'path';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport PptxGenJS from 'pptxgenjs';\n\nimport { IAnalysisService } from '../../domain/interfaces/analysis-service';\nimport { logStep } from '../../infrastructure/services/logger';\n\nimport { ExcelService } from './excel-service';"
    }
]

## Implementation Examples

@implementation {
    "language": "typescript",
    "correct_example": "// File: powerpoint-analysis-service.ts\nexport class PowerpointAnalysisService {\n  private _templateCache: Map<string, any>;\n  \n  async analyzeTemplate(templateId: string): Promise<void> {\n    // Implementation\n  }\n}\n\n// Usage\nconst powerpointAnalysisService = new PowerpointAnalysisService();",
    "incorrect_example": "// File: PowerPointAnalysisService.ts (incorrect - should be kebab-case)\nexport class PowerPointAnalysisService { // incorrect - should be PowerpointAnalysisService\n  private templateCache: Map<string, any>; // incorrect - missing underscore prefix\n  \n  async AnalyzeTemplate(templateId: string): Promise<void> { // incorrect - should be camelCase\n    // Implementation\n  }\n}\n\n// Usage\nconst PowerPointAnalysisService = new PowerPointAnalysisService(); // incorrect - should be camelCase"
}

@validation {
    "required": [
        "All file names must follow kebab-case (with React component exception)",
        "All class names must follow PascalCase with appropriate suffixes",
        "All interface names must have I prefix",
        "All variable names must follow appropriate casing rules",
        "All method names must follow camelCase with appropriate prefixes"
    ],
    "tools": [
        "ESLint rules",
        "Code review process",
        "Automated scripts"
    ]
}

@version "1.0.0"
@last_updated "2024-06-01" 